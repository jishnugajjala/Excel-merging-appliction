# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'c:\Users\talik\OneDrive\Desktop\excel project\design.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import pandas as pd
import os
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QRect, QMetaObject, QCoreApplication
from PyQt5.QtGui import QFont, QPixmap,QColor,QPainter,QLinearGradient
from PyQt5.QtWidgets import (
    QApplication,
    QMainWindow,
    QWidget,
    QLabel,
    QListWidget,
    QPushButton,
    QComboBox,
    QFileDialog,
    QSizePolicy
)
from datetime import datetime

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        MainWindow.resize(2000, 2000)
        

        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.label = QLabel(self.centralwidget)
        self.label.setGeometry(QRect(0, 0, 2000, 2000))
        self.label.setStyleSheet( "color: white; font-size: 20px;")
        self.label.setText("")
        self.label.setObjectName("label")

        self.image_label = QLabel(self.centralwidget)
        self.image_label.setGeometry(QRect(0, 0, 130, 130))
        self.image_label.setObjectName("image_label")
        # Load the image into the QLabel
        pixmap = QPixmap("image3.png")  # Ensure the path to your image is correct
        self.image_label.setPixmap(pixmap)
        self.image_label.setScaledContents(True)

        self.label_2 = QLabel(self.centralwidget)
        self.label_2.setGeometry(QRect(730, 94, 491, 61))
        self.label_2.setStyleSheet( "font: 20pt 'Times New Roman'; color: rgb(255, 255, 255);" )
        self.label_2.setAlignment(Qt.AlignCenter)  # type: ignore
        self.label_2.setObjectName("label_2")

        self.listWidget = QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QRect(450, 170, 1000, 450))
        self.listWidget.setStyleSheet( "border: 2px solid rgb(100, 157, 82); alternate-background-color: rgb(123, 123, 123); border-color: 10px soild black;")
        self.listWidget.setObjectName("listWidget")

        self.pushButton = QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QRect(490, 635, 900, 30))
        self.pushButton.setStyleSheet(
          """
            QPushButton {

                background-color:	rgb(229, 228, 226);
                
            }
            QPushButton:hover {
                background-color: rgb(200, 200, 200);
            }
             QPushButton:pressed {
                background-color: rgb(170, 170, 170);
            }
            """
        )
        self.pushButton.setObjectName("pushButton")

        self.pushButton_2 = QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QRect(1500, 200, 150, 40))
        self.pushButton_2.setStyleSheet("""
            QPushButton {

                background-color:	rgb(229, 228, 226);
                
            }
            QPushButton:hover {
                background-color: rgb(200, 200, 200);
            }
             QPushButton:pressed {
                background-color: rgb(170, 170, 170);
            }
            """
       )  
        self.pushButton_2.setObjectName("pushButton_2")

        self.pushButton_3 = QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QRect(1500, 250, 150, 40))
        self.pushButton_3.setStyleSheet("""
            QPushButton {

                background-color:	rgb(229, 228, 226);
                
            }
            QPushButton:hover {
                background-color: rgb(200, 200, 200);
            }
             QPushButton:pressed {
                background-color: rgb(170, 170, 170);
            }
            """
       )       
        self.pushButton_3.setObjectName("pushButton_3")

        self.pushButton_4 = QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QRect(1500, 410, 150, 40))
        self.pushButton_4.setStyleSheet("""
            QPushButton {

                background-color:	rgb(229, 228, 226);
                
            }
            QPushButton:hover {
                background-color: rgb(200, 200, 200);
            }
             QPushButton:pressed {
                background-color: rgb(170, 170, 170);
            }
            """
       )       
        self.pushButton_4.setObjectName("pushButton_4")

        self.pushButton_5 = QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QRect(770, 685, 110, 40))
        self.pushButton_5.setStyleSheet("""
            QPushButton {

                background-color:	rgb(229, 228, 226);
                
            }
            QPushButton:hover {
                background-color: rgb(200, 200, 200);
            }
             QPushButton:pressed {
                background-color: rgb(170, 170, 170);
            }
            """
       )                                      
        self.pushButton_5.setObjectName("pushButton_5")

        self.comboBox = QComboBox(self.centralwidget)
        self.comboBox.addItem(" ")
        self.comboBox.addItem("Workbook")
        self.comboBox.addItem("Worksheet")
        self.comboBox.setGeometry(QRect(900, 685, 235, 40))
        self.comboBox.setObjectName("comboBox")

        self.pushButton_6 = QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QRect(820, 775, 250, 40))
        self.pushButton_6.setStyleSheet("""
            QPushButton {

                background-color:	rgb(229, 228, 226);
                
            }
            QPushButton:hover {
                background-color: rgb(200, 200, 200);
            }
             QPushButton:pressed {
                background-color: rgb(170, 170, 170);
            }
            """
       )       
        self.pushButton_6.setObjectName("pushButton_6")

        self.label_3 = QLabel(self.centralwidget)
        self.label_3.setGeometry(QRect(100, 875, 2000, 31))
        self.label_3.setStyleSheet("color: white;")
        font1 = QFont("Arial", 10)
        self.label_3.setFont(font1)
        self.label_3.setObjectName("label_3")

       
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_2.setText(_translate("MainWindow", "Excel File Merger"))
        self.pushButton.setText(_translate("MainWindow", "Select files"))
        self.pushButton_2.setText(_translate("MainWindow", "Move up"))
        self.pushButton_3.setText(_translate("MainWindow", "Move down"))
        self.pushButton_4.setText(_translate("MainWindow", "Delete"))
        self.pushButton_5.setText(_translate("MainWindow", "Merge into"))
        self.pushButton_6.setText(_translate("MainWindow", "Merge"))
        self.label_3.setText(_translate("MainWindow", " "))

class MultiFileOpener(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__( )
        self.setupUi(self)
        self.file_paths = []
        self.mode = " "

        self.pushButton.clicked.connect(self.openFiles)
        self.pushButton_2.clicked.connect(self.moveUp)
        self.pushButton_3.clicked.connect(self.moveDown)
        self.pushButton_4.clicked.connect(self.deleteItem)
        self.pushButton_5.clicked.connect(self.fix_window)
        self.pushButton_6.clicked.connect(self.mergeFiles)
           
    def paintEvent(self, event):# type: ignore 
        painter = QPainter(self)
        gradient = QLinearGradient(1500, 0, self.width(), self.height())
        gradient.setColorAt(0.0, QColor(44, 42, 125))  # Start color
        gradient.setColorAt(1.0, QColor(0, 191, 99))   # End color
        painter.setBrush(gradient)
        painter.drawRect(self.rect())

    def openFiles(self):
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly

        files, _ = QFileDialog.getOpenFileNames(
            self,
            "Select Multiple Files",
            "",
            "All Files (*);;Excel Files (*.xlsx);;Python Files (*.py)",
            options=options,
        )
        if files:
            for file in files:
                self.file_paths.append(file)
                self.listWidget.addItem(os.path.basename(file))

    def fix_window(self):
        self.mode = self.comboBox.currentText()

    def moveUp(self):
        currentRow = self.listWidget.currentRow()
        if currentRow > 0:
            currentItem = self.listWidget.takeItem(currentRow)
            self.listWidget.insertItem(currentRow - 1, currentItem)
            self.listWidget.setCurrentRow(currentRow - 1)
            self.file_paths.insert(currentRow - 1, self.file_paths.pop(currentRow))

    def moveDown(self):
        currentRow = self.listWidget.currentRow()
        if currentRow < self.listWidget.count() - 1:
            currentItem = self.listWidget.takeItem(currentRow)
            self.listWidget.insertItem(currentRow + 1, currentItem)
            self.listWidget.setCurrentRow(currentRow + 1)
            self.file_paths.insert(currentRow + 1, self.file_paths.pop(currentRow))

    def deleteItem(self):
        currentRow = self.listWidget.currentRow()
        if currentRow >= 0:
            self.listWidget.takeItem(currentRow)
            del self.file_paths[currentRow]

    def mergeFiles(self):
        self.fix_window()

        if not self.file_paths:
            self.label_3.setText("No files selected!")
            return

        output_filename = self.generate_output_filename()

        self.merge_thread = MergeFilesThread(
            self.file_paths, self.mode, output_filename
        )
        self.merge_thread.result.connect(self.showResult)
        self.merge_thread.start()

    def generate_output_filename(self):
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        base_names = [
            os.path.splitext(os.path.basename(path))[0] for path in self.file_paths
        ]

        # Join base names and ensure it is within 200 characters including timestamp and extension
        joined_base_names = "_".join(base_names)
        max_base_name_length = (
            80 - len(timestamp) - len(".xlsx") - 1
        )  # 1 for the underscore before the timestamp

        if len(joined_base_names) > max_base_name_length:
            joined_base_names = joined_base_names[:max_base_name_length]

        filename = f"{joined_base_names}_{timestamp}.xlsx"
        return filename

    def showResult(self, message):
        self.label_3.setText(message)

class MergeFilesThread(QThread):
    progress = pyqtSignal(int)
    result = pyqtSignal(str)

    def __init__(self, files, mode, output_filename):
        super().__init__()
        self.files = files
        self.mode = mode
        self.output_filename = output_filename

    def run(self):
        try:
            df_list = []
            for i, file in enumerate(self.files):
                df_list.append(pd.read_excel(file))
                self.progress.emit(int((i + 1) / len(self.files) * 100))

            download_path = os.path.join(os.path.expanduser("~"), "Downloads")
            output_file = os.path.join(download_path, self.output_filename)
            if self.mode == "Workbook":
                merged_df = pd.concat(df_list, ignore_index=True)
                merged_df.to_excel(output_file, index=False)
            elif self.mode == "Worksheet":
                with pd.ExcelWriter(output_file) as writer:
                    for i, df in enumerate(df_list):
                        df.to_excel(writer, sheet_name=f"Sheet{i+1}", index=False)
            self.result.emit(
                f"Excel files merged successfully. Merged data saved to {output_file}"
            )
        except Exception as e:
            self.result.emit(f"Error merging files: {e}")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    
    MainWindow = MultiFileOpener()
    MainWindow.show()
    sys.exit(app.exec_())